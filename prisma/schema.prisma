// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String    @id @default(uuid())
  name              String    @db.VarChar(50)
  username          String    @db.VarChar(20)
  password          String    @db.VarChar(100)
  banned_until      DateTime?
  isDefaultPassword Boolean   @default(true)
  isActive          Boolean   @default(true)
  isDeleted         Boolean   @default(false)
  type              String?   @db.Char(1) // 0: Staff, 1: Agent
  created_by        String?   @default("system")
  created_at        DateTime? @default(now())
  updated_by        String?   @default("system")
  updated_at        DateTime? @default(now())

  // Self-relations
  createdByUser users? @relation("CreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("UpdatedBy", fields: [updated_by], references: [id])

  createdUsers users[] @relation("CreatedBy")
  updatedUsers users[] @relation("UpdatedBy")

  // Roles relations
  rolesCreated roles[] @relation("RoleCreatedBy")
  rolesUpdated roles[] @relation("RoleUpdatedBy")

  // Agents relations
  agentsCreated agents[] @relation("AgentCreatedBy")
  agentsUpdated agents[] @relation("AgentUpdatedBy")

  // Relations from banks table
  banksCreated banks[] @relation("BanksCreatedBy")
  banksUpdated banks[] @relation("BanksUpdatedBy")

  agents     agents[]
  user_roles user_roles[]

  // Relations from jamaah table
  jamaahCreated jamaah[] @relation("JamaahCreatedBy")
  jamaahUpdated jamaah[] @relation("JamaahUpdatedBy")

  // Relations from documents table
  documentsCreated documents[] @relation("DocumentsCreatedBy")
  documentsUpdated documents[] @relation("DocumentsUpdatedBy")

  // Relations from jamaah_documents table
  jamaahDocumentsCreated jamaah_documents[] @relation("JamaahDocumentsCreatedBy")
  jamaahDocumentsUpdated jamaah_documents[] @relation("JamaahDocumentsUpdatedBy")

  // Relations from citys table
  citysCreated citys[] @relation("CitysCreatedBy")
  citysUpdated citys[] @relation("CitysUpdatedBy")

  // Relations from hotels table
  hotelsCreated hotels[] @relation("HotelsCreatedBy")
  hotelsUpdated hotels[] @relation("HotelsUpdatedBy")

  // Relations from airlines table
  airlinesCreated airlines[] @relation("AirlinesCreatedBy")
  airlinesUpdated airlines[] @relation("AirlinesUpdatedBy")

  // Relations from transportations table
  transportationsCreated transportations[] @relation("TransportationsCreatedBy")
  transportationsUpdated transportations[] @relation("TransportationsUpdatedBy")

  // Relations from partners table
  partnersCreated partners[] @relation("PartnersCreatedBy")
  partnersUpdated partners[] @relation("PartnersUpdatedBy")

  // Relations from product_types table
  productTypesCreated product_types[] @relation("ProductTypesCreatedBy")
  productTypesUpdated product_types[] @relation("ProductTypesUpdatedBy")

  // Relations from provinces table
  provincesCreated provinces[] @relation("ProvincesCreatedBy")
  provincesUpdated provinces[] @relation("ProvincesUpdatedBy")

  // Relations from districts table
  districtsCreated districts[] @relation("DistrictsCreatedBy")
  districtsUpdated districts[] @relation("DistrictsUpdatedBy")

  // Relations from sub_districts table
  subDistrictsCreated sub_districts[] @relation("SubDistrictsCreatedBy")
  subDistrictsUpdated sub_districts[] @relation("SubDistrictsUpdatedBy")

  // Relations from neighborhoods table
  neighborhoodsCreated neighborhoods[] @relation("NeighborhoodsCreatedBy")
  neighborhoodsUpdated neighborhoods[] @relation("NeighborhoodsUpdatedBy")

  // Relations from tickets table
  ticketsCreated tickets[] @relation("TicketsCreatedBy")
  ticketsUpdated tickets[] @relation("TicketsUpdatedBy")

  // Relations from ticket_details table
  ticketDetailsCreated ticket_details[] @relation("TicketDetailsCreatedBy")
  ticketDetailsUpdated ticket_details[] @relation("TicketDetailsUpdatedBy")

  // Relations from airport table
  airportCreated airport[] @relation("AirportCreatedBy")
  airportUpdated airport[] @relation("AirportUpdatedBy")

  // Relations from ticket_transaction table
  ticketTransactionCreated ticket_transaction[] @relation("TicketTransactionCreatedBy")
  ticketTransactionUpdated ticket_transaction[] @relation("TicketTransactionUpdatedBy")

  // Relations from packages table
  packagesCreated packages[] @relation("PackagesCreatedBy")
  packagesUpdated packages[] @relation("PackagesUpdatedBy")

  // Relations from package_types table
  packageTypesCreated package_types[] @relation("PackageTypesCreatedBy")
  packageTypesUpdated package_types[] @relation("PackageTypesUpdatedBy")

  // Relations from room_types table
  roomTypesCreated room_types[] @relation("RoomTypesCreatedBy")
  roomTypesUpdated room_types[] @relation("RoomTypesUpdatedBy")

  // Relations from package_hotels table
  packageHotelsCreated package_hotels[] @relation("PackageHotelsCreatedBy")
  packageHotelsUpdated package_hotels[] @relation("PackageHotelsUpdatedBy")

  // Relations from package_rooms table
  packageRoomsCreated package_rooms[] @relation("PackageRoomsCreatedBy")
  packageRoomsUpdated package_rooms[] @relation("PackageRoomsUpdatedBy")

  // Relations from package_room_prices table
  packageRoomPricesCreated package_room_prices[] @relation("PackageRoomPricesCreatedBy")
  packageRoomPricesUpdated package_room_prices[] @relation("PackageRoomPricesUpdatedBy")

  // Relations from umrah table
  umrahCreated umrah[] @relation("UmrahCreatedBy")
  umrahUpdated umrah[] @relation("UmrahUpdatedBy")

  // Relations from umrah_registers table
  umrahRegistersCreated umrah_registers[] @relation("UmrahRegistersCreatedBy")
  umrahRegistersUpdated umrah_registers[] @relation("UmrahRegistersUpdatedBy")

  // Relations from umrah_payments table
  umrahPaymentsCreated umrah_payments[] @relation("UmrahPaymentsCreatedBy")
  umrahPaymentsUpdated umrah_payments[] @relation("UmrahPaymentsUpdatedBy")
}

model agents {
  id               Int       @id @default(autoincrement())
  user_id          String
  identity_type    String    @default("0") @db.Char(1)
  bank_id          Int
  account_number   String    @db.VarChar(20)
  phone            String    @db.VarChar(20)
  email            String    @db.VarChar(100)
  balance          Int       @default(0)
  address          String    @db.VarChar(200)
  lead_id          Int?
  coordinator_id   Int?
  target_remaining Int       @default(0)
  isActive         Boolean   @default(true)
  isDeleted        Boolean   @default(false)
  created_by       String?   @default("system")
  created_at       DateTime? @default(now())
  updated_by       String?   @default("system")
  updated_at       DateTime? @default(now())

  // Relations to other tables
  user             users                   @relation(fields: [user_id], references: [id])
  bank             banks                   @relation(fields: [bank_id], references: [id])
  fee_transactions agent_fee_transaction[]
  social_accounts  agent_sosmed[]
  jamaahList       jamaah[]                @relation("AgentToJamaah")

  // Self-relations
  lead                  agents?  @relation("Lead", fields: [lead_id], references: [id])
  coordinator           agents?  @relation("Coordinator", fields: [coordinator_id], references: [id])
  lead_relations        agents[] @relation("Lead")
  coordinator_relations agents[] @relation("Coordinator")

  // Relasi ke users (created_by & updated_by)
  createdByUser users? @relation("AgentCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("AgentUpdatedBy", fields: [updated_by], references: [id])
}

model fees {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(20)
  amount     Int
  desc       String    @db.VarChar(100)
  isActive   Boolean   @default(true)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())
}

model agent_fee_transaction {
  id           Int       @id @default(autoincrement())
  agent_id     Int
  amount       Int
  type         String    @db.Char(1)
  description  String
  trx_date     DateTime
  refrence_id  Int
  category     String    @db.Char(1)
  last_balance Int       @default(0)
  created_by   String?   @default("system")
  created_at   DateTime? @default(now())
  updated_by   String?   @default("system")
  updated_at   DateTime? @default(now())

  agent agents @relation(fields: [agent_id], references: [id])
}

model agent_sosmed {
  id         Int       @id @default(autoincrement())
  agent_id   Int
  social_id  Int
  url        String    @db.VarChar(50)
  isActive   Boolean   @default(true)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  agent        agents       @relation(fields: [agent_id], references: [id])
  social_media social_media @relation(fields: [social_id], references: [id])
}

model social_media {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(20)
  isActive   Boolean   @default(true)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  agent_sosmed agent_sosmed[]
}

model banks {
  id         Int       @id @default(autoincrement())
  bank_code  String
  name       String    @db.VarChar(20)
  isActive   Boolean   @default(true)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  agents agents[]

  // Relasi ke users
  createdByUser users? @relation("BanksCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("BanksUpdatedBy", fields: [updated_by], references: [id])
}

model user_roles {
  id         String    @id @default(uuid())
  user_id    String
  roles_id   Int
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  user       users             @relation(fields: [user_id], references: [id])
  role       roles             @relation(fields: [roles_id], references: [id])
  role_menus user_roles_menu[]

  @@unique([user_id, roles_id]) // 👈 tambahkan ini
}

model roles {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String    @db.VarChar(100)
  isActive    Boolean   @default(true)
  platform    String    @default("0") @db.VarChar(1)
  type        String    @default("0") @db.Char(1)
  created_by  String?   @default("system")
  created_at  DateTime? @default(now())
  updated_by  String?   @default("system")
  updated_at  DateTime? @default(now())

  // Relations
  createdByUser users? @relation("RoleCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("RoleUpdatedBy", fields: [updated_by], references: [id])

  user_roles user_roles[]
}

model user_roles_menu {
  id           Int       @id @default(autoincrement())
  user_role_id String
  menu_id      String
  created_by   String?   @default("system")
  created_at   DateTime? @default(now())
  updated_by   String?   @default("system")
  updated_at   DateTime? @default(now())

  user_role user_roles @relation(fields: [user_role_id], references: [id])
  menuRel   menus      @relation(fields: [menu_id], references: [id])
}

model menus {
  id         String    @id @db.VarChar(50)
  name       String    @db.VarChar(50)
  desc       String    @db.VarChar(50)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  user_roles_menus user_roles_menu[]
  list_apis        list_api[]
}

model list_api {
  id         Int       @id @default(autoincrement())
  menu_id    String
  name       String    @db.VarChar(50)
  url        String    @db.VarChar(50)
  parent_id  Int
  order      Int
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  menuRel menus @relation(fields: [menu_id], references: [id])
}

model jamaah {
  jamaah_code       String   @id @db.VarChar(25)
  first_name        String   @db.VarChar(25)
  mid_name          String?  @db.VarChar(25)
  last_name         String?  @db.VarChar(25)
  identity_number   String   @db.VarChar(16)
  birth_place       String   @db.VarChar(10)
  birth_date        DateTime
  gender            Int // enum: 0: laki-laki, 1: perempuan
  married_status    Int // 0: Menikah 1: Belum Menikah 2: Janda 3: Duda
  father_name       String   @db.VarChar(25)
  mother_name       String   @db.VarChar(25)
  phone_number      String   @db.VarChar(25)
  province          Int
  district          Int
  sub_district      Int
  neighborhoods     Int
  address           String   @db.VarChar(100)
  home_phone_number String?  @db.VarChar(25)
  medical_condition String?  @db.Text
  self_photo        String?  @db.VarChar(200)
  photo_identity    String?  @db.VarChar(200)
  notes             String?  @db.Text
  status            String   @db.Char(1)
  agents_id         Int?
  staff_id          String?  @db.Uuid

  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  jamaah_documents jamaah_documents[]

  // Relasi ke agent
  agent agents? @relation("AgentToJamaah", fields: [agents_id], references: [id])

  // Relasi ke users
  createdByUser users? @relation("JamaahCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("JamaahUpdatedBy", fields: [updated_by], references: [id])

  packages packages[]

  umrah_registers umrah_registers[]

  umrah_payments umrah_payments[]
}

model documents {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(15)
  status     String    @db.Char(1)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  // Relasi ke users
  createdByUser users? @relation("DocumentsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("DocumentsUpdatedBy", fields: [updated_by], references: [id])

  // Relasi ke jamaah_documents
  jamaah_documents jamaah_documents[]
}

model jamaah_documents {
  id          Int       @id @default(autoincrement())
  jamaah_id   String    @db.VarChar(25)
  document_id Int
  status      String    @db.Char(1) // 0: Sudah diterima, 1: Belum diterima
  created_by  String?   @default("system")
  created_at  DateTime? @default(now())
  updated_by  String?   @default("system")
  updated_at  DateTime? @default(now())

  // Relasi ke jamaah
  jamaah jamaah @relation(fields: [jamaah_id], references: [jamaah_code])

  // Relasi ke documents
  document documents @relation(fields: [document_id], references: [id])

  // Relasi ke users?
  createdByUser users? @relation("JamaahDocumentsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("JamaahDocumentsUpdatedBy", fields: [updated_by], references: [id])
}

model citys {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  status     String    @db.Char(1)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  // Relasi ke users?
  createdByUser users? @relation("CitysCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("CitysUpdatedBy", fields: [updated_by], references: [id])

  // Relasi ke hotels
  hotels hotels[]

  package_hotels package_hotels[]
}

model hotels {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  stars      String?   @db.VarChar(5)
  photo      String?   @db.VarChar(100)
  city_id    Int
  status     String    @db.Char(1)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  // Relasi ke citys
  city citys @relation(fields: [city_id], references: [id])

  // Relasi ke users?
  createdByUser users? @relation("HotelsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("HotelsUpdatedBy", fields: [updated_by], references: [id])

  package_hotels package_hotels[]
}

model airlines {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(50)
  display_name String?   @db.VarChar(40)
  status       String    @db.Char(1)
  created_by   String?   @default("system")
  created_at   DateTime? @default(now())
  updated_by   String?   @default("system")
  updated_at   DateTime? @default(now())

  createdByUser users? @relation("AirlinesCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("AirlinesUpdatedBy", fields: [updated_by], references: [id])

  ticket_details ticket_details[]
}

model transportations {
  id           Int       @id @default(autoincrement())
  company_name String    @db.VarChar(50)
  type         String    @db.Char(1)
  status       String    @db.Char(1)
  created_by   String?   @default("system")
  created_at   DateTime? @default(now())
  updated_by   String?   @default("system")
  updated_at   DateTime? @default(now())

  createdByUser users? @relation("TransportationsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("TransportationsUpdatedBy", fields: [updated_by], references: [id])
}

model partners {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(50)
  ppiu_number   String    @db.VarChar(50)
  phone_pic     String    @db.VarChar(50)
  phone_presdir String    @db.VarChar(50)
  phone_office  String    @db.VarChar(50)
  pic_name      String    @db.VarChar(50)
  email         String    @db.VarChar(50)
  address       String    @db.VarChar(100)
  product_type  Int
  categories    String    @db.Char(1) // 0: supplier 1: customer
  status        String    @db.Char(1)
  created_by    String?   @default("system")
  created_at    DateTime? @default(now())
  updated_by    String?   @default("system")
  updated_at    DateTime? @default(now())

  tickets       tickets[]
  productType   product_types @relation(fields: [product_type], references: [id])
  createdByUser users?        @relation("PartnersCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?        @relation("PartnersUpdatedBy", fields: [updated_by], references: [id])

  ticket_transaction ticket_transaction[]
}

model product_types {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(20)
  description String    @db.VarChar(20)
  status      String    @db.Char(1)
  created_by  String?   @default("system")
  created_at  DateTime? @default(now())
  updated_by  String?   @default("system")
  updated_at  DateTime? @default(now())

  createdByUser users? @relation("ProductTypesCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("ProductTypesUpdatedBy", fields: [updated_by], references: [id])

  partners partners[]
}

model provinces {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(20)
  status     String    @db.Char(1)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  createdByUser users? @relation("ProvincesCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("ProvincesUpdatedBy", fields: [updated_by], references: [id])

  districts     districts[]
  sub_districts sub_districts[]
  neighborhoods neighborhoods[]
}

model districts {
  id          Int       @id @default(autoincrement())
  province_id Int
  name        String    @db.VarChar(20)
  status      String    @db.Char(1)
  created_by  String?   @default("system")
  created_at  DateTime? @default(now())
  updated_by  String?   @default("system")
  updated_at  DateTime? @default(now())

  province      provinces @relation(fields: [province_id], references: [id])
  createdByUser users?    @relation("DistrictsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?    @relation("DistrictsUpdatedBy", fields: [updated_by], references: [id])

  sub_districts sub_districts[]
  neighborhoods neighborhoods[]
}

model sub_districts {
  id          Int       @id @default(autoincrement())
  province_id Int
  district_id Int
  name        String    @db.VarChar(20)
  status      String    @db.Char(1)
  created_by  String?   @default("system")
  created_at  DateTime? @default(now())
  updated_by  String?   @default("system")
  updated_at  DateTime? @default(now())

  province      provinces @relation(fields: [province_id], references: [id])
  district      districts @relation(fields: [district_id], references: [id])
  createdByUser users?    @relation("SubDistrictsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?    @relation("SubDistrictsUpdatedBy", fields: [updated_by], references: [id])

  neighborhoods neighborhoods[]
}

model neighborhoods {
  id              Int       @id @default(autoincrement())
  province_id     Int
  district_id     Int
  sub_district_id Int
  name            String    @db.VarChar(20)
  status          String    @db.Char(1)
  created_by      String?   @default("system")
  created_at      DateTime? @default(now())
  updated_by      String?   @default("system")
  updated_at      DateTime? @default(now())

  province      provinces     @relation(fields: [province_id], references: [id])
  district      districts     @relation(fields: [district_id], references: [id])
  sub_district  sub_districts @relation(fields: [sub_district_id], references: [id])
  createdByUser users?        @relation("NeighborhoodsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?        @relation("NeighborhoodsUpdatedBy", fields: [updated_by], references: [id])
}

model tickets {
  id               Int       @id @default(autoincrement())
  booking_code     String    @unique @db.VarChar(10)
  partner_id       Int
  day_pack         Int
  seat_pack        Int
  materialisasi    Int
  cancel           Int
  transaction_date DateTime
  status           String    @db.Char(1)
  created_by       String?   @default("system")
  created_at       DateTime? @default(now())
  updated_by       String?   @default("system")
  updated_at       DateTime? @default(now())

  partner       partners @relation(fields: [partner_id], references: [id])
  createdByUser users?   @relation("TicketsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?   @relation("TicketsUpdatedBy", fields: [updated_by], references: [id])

  ticket_details     ticket_details[]
  ticket_transaction ticket_transaction[]

  packages packages[]
}

model ticket_details {
  id             Int       @id @default(autoincrement())
  ticket_id      Int
  type           Int // 0: Departure, 1: Return
  ticket_date    DateTime
  ticket_airline Int
  flight_no      String? // varchar, bisa nullable jika perlu
  ticket_from    String    @db.VarChar(5)
  ticket_etd     String    @db.VarChar(5)
  ticket_to      String    @db.VarChar(5)
  ticket_eta     String    @db.VarChar(5)
  created_by     String?   @default("system")
  created_at     DateTime? @default(now())
  updated_by     String?   @default("system")
  updated_at     DateTime? @default(now())

  ticket        tickets  @relation(fields: [ticket_id], references: [id])
  airline       airlines @relation(fields: [ticket_airline], references: [id])
  airport_from  airport  @relation("AirportFrom", fields: [ticket_from], references: [code])
  airport_to    airport  @relation("AirportTo", fields: [ticket_to], references: [code])
  createdByUser users?   @relation("TicketDetailsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?   @relation("TicketDetailsUpdatedBy", fields: [updated_by], references: [id])
}

model airport {
  code       String    @id @db.VarChar(5)
  name       String    @db.VarChar(100)
  status     String    @db.Char(1)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  createdByUser users? @relation("AirportCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("AirportUpdatedBy", fields: [updated_by], references: [id])

  ticketDetailsFrom ticket_details[] @relation("AirportFrom")
  ticketDetailsTo   ticket_details[] @relation("AirportTo")
}

model ticket_transaction {
  id           Int       @id @default(autoincrement())
  booking_code String    @db.VarChar(10)
  partner_id   Int
  trx_number   String
  created_by   String?   @default("system")
  created_at   DateTime? @default(now())
  updated_by   String?   @default("system")
  updated_at   DateTime? @default(now())

  ticket        tickets  @relation(fields: [booking_code], references: [booking_code])
  partner       partners @relation(fields: [partner_id], references: [id])
  createdByUser users?   @relation("TicketTransactionCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?   @relation("TicketTransactionUpdatedBy", fields: [updated_by], references: [id])
}

model packages {
  id                         String    @id @db.VarChar(20)
  name                       String    @db.VarChar(20)
  itinerary                  String?   @db.VarChar(50) // file pdf
  manasik_invitation         String?   @db.VarChar(50) // file pdf
  brochure                   String?   @db.VarChar(50) // file pdf
  departure_info             String?   @db.VarChar(50) // file pdf
  departure_date             DateTime?
  ticket                     Int?
  seat                       Int?
  maturity_passport_delivery DateTime?
  maturity_repayment         DateTime?
  manasik_date               DateTime?
  manasik_time               DateTime? // Prisma tidak punya time type, pakai DateTime atau String
  manasik_price              Int?
  admin_price                Int?
  equipment_handling_price   Int?
  pcr_price                  Int?
  airport_rally_point        String?   @db.VarChar(50)
  gathering_time             DateTime? // sama seperti manasik_time
  tour_lead                  String?   @db.VarChar(25)
  checkin_madinah            DateTime?
  checkout_madinah           DateTime?
  checkin_mekkah             DateTime?
  checkout_mekkah            DateTime?
  isPromo                    Boolean   @default(false)
  wa_group                   String?   @db.VarChar(10)
  notes                      String?   @db.Text
  status                     String    @db.Char(1)
  created_by                 String?   @default("system")
  created_at                 DateTime? @default(now())
  updated_by                 String?   @default("system")
  updated_at                 DateTime? @default(now())

  ticket_rel    tickets? @relation(fields: [ticket], references: [id])
  tourLeadUser  jamaah?  @relation(fields: [tour_lead], references: [jamaah_code])
  createdByUser users?   @relation("PackagesCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?   @relation("PackagesUpdatedBy", fields: [updated_by], references: [id])

  package_hotels      package_hotels[]
  package_room_prices package_room_prices[]
  umrah_rel           umrah[]               @relation("UmrahToPackage")
}

model package_types {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(20)
  desc       String    @db.VarChar(20)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  createdByUser users? @relation("PackageTypesCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("PackageTypesUpdatedBy", fields: [updated_by], references: [id])

  package_hotels package_hotels[]
  package_rooms  package_rooms[]
}

model room_types {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(20)
  desc       String    @db.VarChar(20)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  createdByUser users? @relation("RoomTypesCreatedBy", fields: [created_by], references: [id])
  updatedByUser users? @relation("RoomTypesUpdatedBy", fields: [updated_by], references: [id])

  package_rooms package_rooms[]
}

model package_hotels {
  id              Int       @id @default(autoincrement())
  package_id      String
  package_type_id Int
  city_id         Int
  hotel_id        Int
  created_by      String?   @default("system")
  created_at      DateTime? @default(now())
  updated_by      String?   @default("system")
  updated_at      DateTime? @default(now())

  package       packages      @relation(fields: [package_id], references: [id])
  package_type  package_types @relation(fields: [package_type_id], references: [id])
  city          citys         @relation(fields: [city_id], references: [id])
  hotel         hotels        @relation(fields: [hotel_id], references: [id])
  createdByUser users?        @relation("PackageHotelsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?        @relation("PackageHotelsUpdatedBy", fields: [updated_by], references: [id])
}

model package_rooms {
  id              Int       @id @default(autoincrement())
  package_type_id Int
  room_type_id    Int
  status          String    @db.Char(1)
  created_by      String?   @default("system")
  created_at      DateTime? @default(now())
  updated_by      String?   @default("system")
  updated_at      DateTime? @default(now())

  package_type        package_types         @relation(fields: [package_type_id], references: [id])
  room_type           room_types            @relation(fields: [room_type_id], references: [id])
  createdByUser       users?                @relation("PackageRoomsCreatedBy", fields: [created_by], references: [id])
  updatedByUser       users?                @relation("PackageRoomsUpdatedBy", fields: [updated_by], references: [id])
  package_room_prices package_room_prices[]
}

model package_room_prices {
  id               Int       @id @default(autoincrement())
  packages_id      String
  package_rooms_id Int
  price            Int
  created_by       String?   @default("system")
  created_at       DateTime? @default(now())
  updated_by       String?   @default("system")
  updated_at       DateTime? @default(now())

  package         packages          @relation(fields: [packages_id], references: [id])
  package_room    package_rooms     @relation(fields: [package_rooms_id], references: [id])
  createdByUser   users?            @relation("PackageRoomPricesCreatedBy", fields: [created_by], references: [id])
  updatedByUser   users?            @relation("PackageRoomPricesUpdatedBy", fields: [updated_by], references: [id])
  umrah_registers umrah_registers[]
}

model umrah {
  umroh_code String    @id @db.VarChar(20)
  package    String    @db.VarChar(20)
  pin        Int       @default(12345)
  created_by String?   @default("system")
  created_at DateTime? @default(now())
  updated_by String?   @default("system")
  updated_at DateTime? @default(now())

  // Relations
  createdByUser users?            @relation("UmrahCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?            @relation("UmrahUpdatedBy", fields: [updated_by], references: [id])
  registers     umrah_registers[] @relation("UmrahToRegister")
  packageRel    packages          @relation("UmrahToPackage", fields: [package], references: [id])
}

model umrah_registers {
  id                 String    @id @default(uuid())
  umroh_code         String    @db.VarChar(20)
  jamaah             String    @db.VarChar(25)
  remarks            Int
  mahram             String?   @db.VarChar(20)
  package_room_price Int? // ← Dibuat optional
  other_expenses     Int       @default(0)
  office_discount    Int       @default(0)
  agent_discount     Int       @default(0)
  agent_id           Int?
  register_name      String    @db.VarChar(20)
  register_phone     String    @db.VarChar(20)
  notes              String?   @db.VarChar(100)
  status             String    @db.Char(1)
  created_by         String?   @default("system")
  created_at         DateTime? @default(now())
  updated_by         String?   @default("system")
  updated_at         DateTime? @default(now())

  // Relations
  jamaahRel        jamaah               @relation(fields: [jamaah], references: [jamaah_code])
  packageRoomPrice package_room_prices? @relation(fields: [package_room_price], references: [id]) // ← Dibuat optional
  createdByUser    users?               @relation("UmrahRegistersCreatedBy", fields: [created_by], references: [id])
  updatedByUser    users?               @relation("UmrahRegistersUpdatedBy", fields: [updated_by], references: [id])
  umrah            umrah                @relation("UmrahToRegister", fields: [umroh_code], references: [umroh_code])
  umrah_payments   umrah_payments[]
}

model umrah_payments {
  id                          String    @id @default(uuid())
  jamaah                      String    @db.VarChar(25)
  umrah_register_id           String    @db.VarChar(36) // ← FK ke umrah_registers.id
  remaining_package_payment   Int
  remaining_equipment_payment Int
  remaining_pcr_payment       Int
  remaining_other_payment     Int
  status                      String    @db.Char(1)
  trx_number                  String?
  created_by                  String?   @default("system")
  created_at                  DateTime? @default(now())
  updated_by                  String?   @default("system")
  updated_at                  DateTime? @default(now())

  // Relations
  jamaahRel     jamaah          @relation(fields: [jamaah], references: [jamaah_code])
  registerRel   umrah_registers @relation(fields: [umrah_register_id], references: [id])
  createdByUser users?          @relation("UmrahPaymentsCreatedBy", fields: [created_by], references: [id])
  updatedByUser users?          @relation("UmrahPaymentsUpdatedBy", fields: [updated_by], references: [id])
}
